import express from "express"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º express
import path from "path";
import http from "http";
import socketIO from "socket.io";
import Player from "./player";
import MonopolyGame from "./game";

const port: number = 3000

class App {
    private MAX_PLAYERS = 2;
    private server: http.Server
    private port: number
    private io: socketIO.Server
    private players: { [id: string]: Player } = {} //—Å–ª–æ–≤–∞—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—ä –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–∏–ø—É {socket.id: Player { _money: 50000, _name: Nuck}
    private games: { [id: number]: MonopolyGame } = {}
    private colour = ["Orange", "Blue" , "Pirple" , "Green" ];

    constructor(port: number) {
        this.port = port;

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Express
        const app = express();
        app.use(express.static(path.join(__dirname, '../../public/client')));  //–ø—É—Ç—å –¥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä –æ—Ç—Å—ã–ª–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        app.use('/jquery', express.static(path.join(__dirname, '../../node_modules/jquery/dist')))
        app.use('/bootstrap', express.static(path.join(__dirname, '../../node_modules/bootstrap/dist')))

        // –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è HTTP, –≤—Ö–æ–¥—è—â–µ–≥–æ –≤ Node.js.
        // –°–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ —Å Express
        this.server = new http.Server(app);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Socket.IO —Ç–∞–∫, —á—Ç–æ–±—ã –∏–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        // –∫ —Å–µ—Ä–≤–µ—Ä—É Express/HTTP
        this.io = socketIO(this.server);


        this.io.on('connection', (socket: socketIO.Socket) => {
            console.log('a user connected : ' + socket.id);

            socket.on('disconnect', () => {
                console.log('socket disconnected : ' + socket.id);
                if (typeof this.games[0] != 'undefined'){
                    this.games[0].delPlayer(socket.id, this.io);

                }
                else if (this.players && this.players[socket.id]) {
                    delete this.players[socket.id] //—É–¥–∞–ª—è–µ—Ç –∏–∑ –ø–∞—Ä—Ç–∏–∏ –∏–≥—Ä–æ–∫–∞ –æ—Ç –∫–æ–≥–æ –ø—Ä–∏—à–µ–ª 'disconnected'
                    console.log("In game " + (Object.keys(this.players).length) + " players");
                }

                //TODO –Ω–∞–¥–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —É–±–∏—Ä–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç–≤–∞–ª–∏–ª—Å—è
            });

            socket.on("newUser", (username: string) => {
                if ((Object.keys(this.players).length) < this.MAX_PLAYERS) {
                    this.players[socket.id] = new Player(username, this.colour[(Object.keys(this.players).length)])

                    //socket.broadcast.emit('newUserReport', this.players[socket.id].getPlayer());
                    //console.log(this.players);
                    //console.log(this.players[socket.id].getPlayer());
                    //console.log("In game " + (Object.keys(this.players).length) + " players");

                    //–µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤, —Ç–æ –æ—Ç—Å—ã–ª–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–ª–∏–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
                    if ((Object.keys(this.players).length) == this.MAX_PLAYERS) {
                        console.log("start game");

                        //console.log(allPlayers);

                        //TODO –¥–æ–ø–∏–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Å—Å–∏–π
                        //—Å–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
                        this.games[0] = new MonopolyGame(0, this.MAX_PLAYERS, this.players);
                        this.io.emit('renderStartUser', this.games[0].getPlayersData()); //—Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    }
                    socket.emit('responseNewUser', "<div class=\"alert alert-success\" role=\"alert\">üëç Great, now we are waiting for friends </div>");
                    console.log("Game waiting " + (Object.keys(this.players).length) + " players");
                } else {
                    socket.emit('responseNewUser', "<div class=\"alert alert-warning\" role=\"alert\">‚úã Sorry but all the players are in the game. Come back another time</div>");
                }
                //socket.broadcast.emit('newUserReport', JSON.stringify( data ));
            });

            //socket.emit("message", "Hello " + socket.id); //–¥–∞—Å—Ç –∞–ª–µ—Ä—Ç —Å id

            //—Å–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Ç–∏–ø–∞ message
            // –Ω–∞–∂–∞—Ç–∏–µ –±—Ä–æ—Å–∫–∞ —Ö–æ–¥–∞
            socket.on("rollDice", (id: string) => {
                let stateGame = this.games[0].gameState();
                if (stateGame.gameStatus == 0) {
                    if (stateGame.whoMove == socket.id) {
                        console.log(socket.id + " game wait roll, move this player");
                        let ds1 = this.getRandomIntInclusive(1,6); //–∑–Ω–∞—á–µ–Ω–∏–µ 1 –∫—É–±–∏–∫–∞
                        let ds2 = this.getRandomIntInclusive(1,6); //–∑–Ω–∞—á–µ–Ω–∏–µ 2 –∫—É–±–∏–∫–∞
                        let lastPos = this.players[socket.id].getPosition();

                        this.games[0].move(ds1+ds2); //–ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ–º —Ñ–∏—à–∫—É
                        console.log(ds1 + " " + ds2);
                        this.io.emit("updDice", ds1, ds2); //–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫—É–±–∏–∫–æ–≤

                        this.io.emit("updPlayer",this.games[0].getPlayersData()); //–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        this.io.emit("updChip", lastPos, this.players[socket.id].getPosition());
                        //TODO –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏—à–∫–∏
                    }
                    else {
                        console.log(socket.id + " game wait roll, but not this player")
                    }
                } else {
                    console.log("Game not wait rollDice, someone need endMove");
                }
            });

            socket.on("endMove", (id: string) => {
                let stateGame = this.games[0].gameState();
                if (stateGame.gameStatus == 1) {
                    if (stateGame.whoMove == socket.id) {
                        console.log(socket.id + " move ends this player");
                        this.games[0].endMove();
                        this.io.emit("updMovePlayer", this.games[0].getInxWhoMove(), this.games[0].getCountPlayer())
                        //TODO –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —á—Ç–æ–± –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
                    }
                    else {
                        console.log(socket.id + " game wait endMove, but not this player")
                    }
                }
                else {
                    console.log("Game not wait endMove, someone need roll Dice");
                }

            })

            socket.on("buyCard", (id: string) => {
                console.log("server: buy " + id);
                this.games[0].buyCard(id, this.io);
                this.io.emit("updPlayer",this.games[0].getPlayersData()); //–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç–∫—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            });

            socket.on("sellCard", function (message: string) {
                console.log(socket.id + " wants: " + message);
            });

            socket.on("buyHouse", function (message: string) {
                console.log(socket.id + " wants: " + message);
            });

            socket.on("sellHouse", function (message: string) {
                console.log(socket.id + " wants: " + message);
            });
        })
    }

    public Start() {
        this.server.listen(this.port, () => {
            console.log(`Server listening on ports ${this.port}.`)
        })
    }

    public getRandomIntInclusive(min: number, max: number) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min; //–ú–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º –≤–∫–ª—é—á–∞—é—Ç—Å—è
    }
}

new App(port).Start()


/* ----------------------------------------------------------
-------------------------------------------------------------
 */
/*import * as path from "path";

import express = require('express'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º express

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Express
const app = express();
const port = 3000 || process.env.PORT;
app.set("port", port);

// –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é –º–æ–¥—É–ª—è HTTP, –≤—Ö–æ–¥—è—â–µ–≥–æ –≤ Node.js.
// –°–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ —Å Express
let http = require("http").Server(app);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Socket.IO —Ç–∞–∫, —á—Ç–æ–±—ã –∏–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// –∫ —Å–µ—Ä–≤–µ—Ä—É Express/HTTP
let io = require("socket.io")(http);

app.use(express.static(path.join(__dirname, '../../public/client'))); //–ø—É—Ç—å –¥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä –æ—Ç—Å—ã–ª–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É

//–º–∞—Ä—à—Ä—É—Ç
app.get("/", (req: any, res: any) => {
    //—Ä–µ–Ω–¥–µ—Ä–∏–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    res.render("index");
});
*/ /*

//—Å–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–Ω –∑–∞–≥—Ä—É–∑–∏—Å—è - connected
io.on("connection", function(socket: any) {
    console.log("a user connected id - " + socket.id.toString());

    socket.on("newUser", function(username: string){
        socket.username = username;
        socket.broadcast.emit('message', socket.username + ' has just connected to game!');
        let data = {
            "name": username,
            "money": "60 000"
        };
        console.log(data);
        socket.emit("newUser", JSON.stringify( data ));
    });

    //—Å–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Ç–∏–ø–∞ message
    socket.on("rollDice", function(message: string) {
        console.log(socket.username + " wants:" + message);
    });

    socket.on("buyCard", function(message: string) {
        console.log(socket.username + " wants:" + message);
    });

    socket.on("sellCard", function(message: string) {
        console.log(socket.username + " wants:" + message);
    });

    socket.on("buyHouse", function(message: string) {
        console.log(socket.username + " wants:" + message);
    });

    socket.on("sellHouse", function(message: string) {
        console.log(socket.username + " wants:" + message);
    });

    socket.on('disconnect', () => {
        io.emit('user disconnected id - ' + socket.id.toString());
    });
});

*/





